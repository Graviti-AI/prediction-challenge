# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import simulator_pb2 as simulator__pb2


class SimulatorServerStub(object):
    """The simulator service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchEnv = channel.unary_unary(
                '/service.SimulatorServer/FetchEnv',
                request_serializer=simulator__pb2.FetchEnvRequest.SerializeToString,
                response_deserializer=simulator__pb2.FetchEnvResponse.FromString,
                )
        self.PushMyTrajectory = channel.unary_unary(
                '/service.SimulatorServer/PushMyTrajectory',
                request_serializer=simulator__pb2.PushMyTrajectoryRequest.SerializeToString,
                response_deserializer=simulator__pb2.PushMyTrajectoryResponse.FromString,
                )


class SimulatorServerServicer(object):
    """The simulator service definition.
    """

    def FetchEnv(self, request, context):
        """fetch environment from server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushMyTrajectory(self, request, context):
        """push my status to server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimulatorServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchEnv': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchEnv,
                    request_deserializer=simulator__pb2.FetchEnvRequest.FromString,
                    response_serializer=simulator__pb2.FetchEnvResponse.SerializeToString,
            ),
            'PushMyTrajectory': grpc.unary_unary_rpc_method_handler(
                    servicer.PushMyTrajectory,
                    request_deserializer=simulator__pb2.PushMyTrajectoryRequest.FromString,
                    response_serializer=simulator__pb2.PushMyTrajectoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.SimulatorServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SimulatorServer(object):
    """The simulator service definition.
    """

    @staticmethod
    def FetchEnv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.SimulatorServer/FetchEnv',
            simulator__pb2.FetchEnvRequest.SerializeToString,
            simulator__pb2.FetchEnvResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushMyTrajectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.SimulatorServer/PushMyTrajectory',
            simulator__pb2.PushMyTrajectoryRequest.SerializeToString,
            simulator__pb2.PushMyTrajectoryResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
