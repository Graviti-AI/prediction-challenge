// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: simulator.proto

#include "simulator.pb.h"
#include "simulator.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace service {

static const char* SimulatorServer_method_names[] = {
  "/service.SimulatorServer/FetchEnv",
  "/service.SimulatorServer/PushMyTrajectory",
};

std::unique_ptr< SimulatorServer::Stub> SimulatorServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SimulatorServer::Stub> stub(new SimulatorServer::Stub(channel));
  return stub;
}

SimulatorServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FetchEnv_(SimulatorServer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PushMyTrajectory_(SimulatorServer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SimulatorServer::Stub::FetchEnv(::grpc::ClientContext* context, const ::service::FetchEnvRequest& request, ::service::FetchEnvResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_FetchEnv_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service::FetchEnvResponse>* SimulatorServer::Stub::AsyncFetchEnvRaw(::grpc::ClientContext* context, const ::service::FetchEnvRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::service::FetchEnvResponse>(channel_.get(), cq, rpcmethod_FetchEnv_, context, request);
}

::grpc::Status SimulatorServer::Stub::PushMyTrajectory(::grpc::ClientContext* context, const ::service::PushMyTrajectoryRequest& request, ::service::PushMyTrajectoryResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PushMyTrajectory_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::service::PushMyTrajectoryResponse>* SimulatorServer::Stub::AsyncPushMyTrajectoryRaw(::grpc::ClientContext* context, const ::service::PushMyTrajectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::service::PushMyTrajectoryResponse>(channel_.get(), cq, rpcmethod_PushMyTrajectory_, context, request);
}

SimulatorServer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      SimulatorServer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SimulatorServer::Service, ::service::FetchEnvRequest, ::service::FetchEnvResponse>(
          std::mem_fn(&SimulatorServer::Service::FetchEnv), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SimulatorServer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SimulatorServer::Service, ::service::PushMyTrajectoryRequest, ::service::PushMyTrajectoryResponse>(
          std::mem_fn(&SimulatorServer::Service::PushMyTrajectory), this)));
}

SimulatorServer::Service::~Service() {
}

::grpc::Status SimulatorServer::Service::FetchEnv(::grpc::ServerContext* context, const ::service::FetchEnvRequest* request, ::service::FetchEnvResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimulatorServer::Service::PushMyTrajectory(::grpc::ServerContext* context, const ::service::PushMyTrajectoryRequest* request, ::service::PushMyTrajectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace service

