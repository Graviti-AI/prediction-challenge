// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simulator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_simulator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_simulator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_simulator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_simulator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_simulator_2eproto;
namespace service {
class FetchEnvRequest;
class FetchEnvRequestDefaultTypeInternal;
extern FetchEnvRequestDefaultTypeInternal _FetchEnvRequest_default_instance_;
class FetchEnvResponse;
class FetchEnvResponseDefaultTypeInternal;
extern FetchEnvResponseDefaultTypeInternal _FetchEnvResponse_default_instance_;
class PushMyTrajectoryRequest;
class PushMyTrajectoryRequestDefaultTypeInternal;
extern PushMyTrajectoryRequestDefaultTypeInternal _PushMyTrajectoryRequest_default_instance_;
class PushMyTrajectoryResponse;
class PushMyTrajectoryResponseDefaultTypeInternal;
extern PushMyTrajectoryResponseDefaultTypeInternal _PushMyTrajectoryResponse_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
}  // namespace service
PROTOBUF_NAMESPACE_OPEN
template<> ::service::FetchEnvRequest* Arena::CreateMaybeMessage<::service::FetchEnvRequest>(Arena*);
template<> ::service::FetchEnvResponse* Arena::CreateMaybeMessage<::service::FetchEnvResponse>(Arena*);
template<> ::service::PushMyTrajectoryRequest* Arena::CreateMaybeMessage<::service::PushMyTrajectoryRequest>(Arena*);
template<> ::service::PushMyTrajectoryResponse* Arena::CreateMaybeMessage<::service::PushMyTrajectoryResponse>(Arena*);
template<> ::service::State* Arena::CreateMaybeMessage<::service::State>(Arena*);
template<> ::service::Trajectory* Arena::CreateMaybeMessage<::service::Trajectory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service {

// ===================================================================

class State PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.State) */ {
 public:
  inline State() : State(nullptr) {};
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_2eproto);
    return ::descriptor_table_simulator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentTypeFieldNumber = 4,
    kTrackIdFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kTimestampMsFieldNumber = 3,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kVxFieldNumber = 7,
    kVyFieldNumber = 8,
    kPsiRadFieldNumber = 9,
    kLengthFieldNumber = 10,
    kWidthFieldNumber = 11,
  };
  // string agent_type = 4;
  void clear_agent_type();
  const std::string& agent_type() const;
  void set_agent_type(const std::string& value);
  void set_agent_type(std::string&& value);
  void set_agent_type(const char* value);
  void set_agent_type(const char* value, size_t size);
  std::string* mutable_agent_type();
  std::string* release_agent_type();
  void set_allocated_agent_type(std::string* agent_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_agent_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_agent_type(
      std::string* agent_type);
  private:
  const std::string& _internal_agent_type() const;
  void _internal_set_agent_type(const std::string& value);
  std::string* _internal_mutable_agent_type();
  public:

  // uint64 track_id = 1;
  void clear_track_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 track_id() const;
  void set_track_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_track_id() const;
  void _internal_set_track_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 frame_id = 2;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp_ms = 3;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_ms() const;
  void _internal_set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double x = 5;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 6;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double vx = 7;
  void clear_vx();
  double vx() const;
  void set_vx(double value);
  private:
  double _internal_vx() const;
  void _internal_set_vx(double value);
  public:

  // double vy = 8;
  void clear_vy();
  double vy() const;
  void set_vy(double value);
  private:
  double _internal_vy() const;
  void _internal_set_vy(double value);
  public:

  // double psi_rad = 9;
  void clear_psi_rad();
  double psi_rad() const;
  void set_psi_rad(double value);
  private:
  double _internal_psi_rad() const;
  void _internal_set_psi_rad(double value);
  public:

  // double length = 10;
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // double width = 11;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:service.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 track_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ms_;
  double x_;
  double y_;
  double vx_;
  double vy_;
  double psi_rad_;
  double length_;
  double width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_2eproto;
};
// -------------------------------------------------------------------

class Trajectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.Trajectory) */ {
 public:
  inline Trajectory() : Trajectory(nullptr) {};
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(Trajectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const final {
    return CreateMaybeMessage<Trajectory>(nullptr);
  }

  Trajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.Trajectory";
  }
  protected:
  explicit Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_2eproto);
    return ::descriptor_table_simulator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // repeated .service.State state = 1;
  int state_size() const;
  private:
  int _internal_state_size() const;
  public:
  void clear_state();
  ::service::State* mutable_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::State >*
      mutable_state();
  private:
  const ::service::State& _internal_state(int index) const;
  ::service::State* _internal_add_state();
  public:
  const ::service::State& state(int index) const;
  ::service::State* add_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::State >&
      state() const;

  // @@protoc_insertion_point(class_scope:service.Trajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::State > state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_2eproto;
};
// -------------------------------------------------------------------

class FetchEnvRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.FetchEnvRequest) */ {
 public:
  inline FetchEnvRequest() : FetchEnvRequest(nullptr) {};
  virtual ~FetchEnvRequest();

  FetchEnvRequest(const FetchEnvRequest& from);
  FetchEnvRequest(FetchEnvRequest&& from) noexcept
    : FetchEnvRequest() {
    *this = ::std::move(from);
  }

  inline FetchEnvRequest& operator=(const FetchEnvRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchEnvRequest& operator=(FetchEnvRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchEnvRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchEnvRequest* internal_default_instance() {
    return reinterpret_cast<const FetchEnvRequest*>(
               &_FetchEnvRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FetchEnvRequest& a, FetchEnvRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchEnvRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchEnvRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchEnvRequest* New() const final {
    return CreateMaybeMessage<FetchEnvRequest>(nullptr);
  }

  FetchEnvRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchEnvRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchEnvRequest& from);
  void MergeFrom(const FetchEnvRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchEnvRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.FetchEnvRequest";
  }
  protected:
  explicit FetchEnvRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_2eproto);
    return ::descriptor_table_simulator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service.FetchEnvRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_2eproto;
};
// -------------------------------------------------------------------

class FetchEnvResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.FetchEnvResponse) */ {
 public:
  inline FetchEnvResponse() : FetchEnvResponse(nullptr) {};
  virtual ~FetchEnvResponse();

  FetchEnvResponse(const FetchEnvResponse& from);
  FetchEnvResponse(FetchEnvResponse&& from) noexcept
    : FetchEnvResponse() {
    *this = ::std::move(from);
  }

  inline FetchEnvResponse& operator=(const FetchEnvResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchEnvResponse& operator=(FetchEnvResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchEnvResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchEnvResponse* internal_default_instance() {
    return reinterpret_cast<const FetchEnvResponse*>(
               &_FetchEnvResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FetchEnvResponse& a, FetchEnvResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchEnvResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchEnvResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchEnvResponse* New() const final {
    return CreateMaybeMessage<FetchEnvResponse>(nullptr);
  }

  FetchEnvResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchEnvResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchEnvResponse& from);
  void MergeFrom(const FetchEnvResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchEnvResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.FetchEnvResponse";
  }
  protected:
  explicit FetchEnvResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_2eproto);
    return ::descriptor_table_simulator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kTrajectoryFieldNumber = 3,
    kRespCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .service.Trajectory trajectory = 3;
  bool has_trajectory() const;
  private:
  bool _internal_has_trajectory() const;
  public:
  void clear_trajectory();
  const ::service::Trajectory& trajectory() const;
  ::service::Trajectory* release_trajectory();
  ::service::Trajectory* mutable_trajectory();
  void set_allocated_trajectory(::service::Trajectory* trajectory);
  private:
  const ::service::Trajectory& _internal_trajectory() const;
  ::service::Trajectory* _internal_mutable_trajectory();
  public:
  void unsafe_arena_set_allocated_trajectory(
      ::service::Trajectory* trajectory);
  ::service::Trajectory* unsafe_arena_release_trajectory();

  // int32 resp_code = 1;
  void clear_resp_code();
  ::PROTOBUF_NAMESPACE_ID::int32 resp_code() const;
  void set_resp_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resp_code() const;
  void _internal_set_resp_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:service.FetchEnvResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::service::Trajectory* trajectory_;
  ::PROTOBUF_NAMESPACE_ID::int32 resp_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_2eproto;
};
// -------------------------------------------------------------------

class PushMyTrajectoryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.PushMyTrajectoryRequest) */ {
 public:
  inline PushMyTrajectoryRequest() : PushMyTrajectoryRequest(nullptr) {};
  virtual ~PushMyTrajectoryRequest();

  PushMyTrajectoryRequest(const PushMyTrajectoryRequest& from);
  PushMyTrajectoryRequest(PushMyTrajectoryRequest&& from) noexcept
    : PushMyTrajectoryRequest() {
    *this = ::std::move(from);
  }

  inline PushMyTrajectoryRequest& operator=(const PushMyTrajectoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushMyTrajectoryRequest& operator=(PushMyTrajectoryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushMyTrajectoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushMyTrajectoryRequest* internal_default_instance() {
    return reinterpret_cast<const PushMyTrajectoryRequest*>(
               &_PushMyTrajectoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PushMyTrajectoryRequest& a, PushMyTrajectoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PushMyTrajectoryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushMyTrajectoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushMyTrajectoryRequest* New() const final {
    return CreateMaybeMessage<PushMyTrajectoryRequest>(nullptr);
  }

  PushMyTrajectoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushMyTrajectoryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushMyTrajectoryRequest& from);
  void MergeFrom(const PushMyTrajectoryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushMyTrajectoryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.PushMyTrajectoryRequest";
  }
  protected:
  explicit PushMyTrajectoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_2eproto);
    return ::descriptor_table_simulator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryFieldNumber = 3,
  };
  // .service.Trajectory trajectory = 3;
  bool has_trajectory() const;
  private:
  bool _internal_has_trajectory() const;
  public:
  void clear_trajectory();
  const ::service::Trajectory& trajectory() const;
  ::service::Trajectory* release_trajectory();
  ::service::Trajectory* mutable_trajectory();
  void set_allocated_trajectory(::service::Trajectory* trajectory);
  private:
  const ::service::Trajectory& _internal_trajectory() const;
  ::service::Trajectory* _internal_mutable_trajectory();
  public:
  void unsafe_arena_set_allocated_trajectory(
      ::service::Trajectory* trajectory);
  ::service::Trajectory* unsafe_arena_release_trajectory();

  // @@protoc_insertion_point(class_scope:service.PushMyTrajectoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service::Trajectory* trajectory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_2eproto;
};
// -------------------------------------------------------------------

class PushMyTrajectoryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.PushMyTrajectoryResponse) */ {
 public:
  inline PushMyTrajectoryResponse() : PushMyTrajectoryResponse(nullptr) {};
  virtual ~PushMyTrajectoryResponse();

  PushMyTrajectoryResponse(const PushMyTrajectoryResponse& from);
  PushMyTrajectoryResponse(PushMyTrajectoryResponse&& from) noexcept
    : PushMyTrajectoryResponse() {
    *this = ::std::move(from);
  }

  inline PushMyTrajectoryResponse& operator=(const PushMyTrajectoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushMyTrajectoryResponse& operator=(PushMyTrajectoryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushMyTrajectoryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushMyTrajectoryResponse* internal_default_instance() {
    return reinterpret_cast<const PushMyTrajectoryResponse*>(
               &_PushMyTrajectoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PushMyTrajectoryResponse& a, PushMyTrajectoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PushMyTrajectoryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushMyTrajectoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushMyTrajectoryResponse* New() const final {
    return CreateMaybeMessage<PushMyTrajectoryResponse>(nullptr);
  }

  PushMyTrajectoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushMyTrajectoryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushMyTrajectoryResponse& from);
  void MergeFrom(const PushMyTrajectoryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushMyTrajectoryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.PushMyTrajectoryResponse";
  }
  protected:
  explicit PushMyTrajectoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_2eproto);
    return ::descriptor_table_simulator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRespCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 resp_code = 1;
  void clear_resp_code();
  ::PROTOBUF_NAMESPACE_ID::int32 resp_code() const;
  void set_resp_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resp_code() const;
  void _internal_set_resp_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:service.PushMyTrajectoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 resp_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State

// uint64 track_id = 1;
inline void State::clear_track_id() {
  track_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::_internal_track_id() const {
  return track_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::track_id() const {
  // @@protoc_insertion_point(field_get:service.State.track_id)
  return _internal_track_id();
}
inline void State::_internal_set_track_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  track_id_ = value;
}
inline void State::set_track_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_track_id(value);
  // @@protoc_insertion_point(field_set:service.State.track_id)
}

// uint64 frame_id = 2;
inline void State::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::frame_id() const {
  // @@protoc_insertion_point(field_get:service.State.frame_id)
  return _internal_frame_id();
}
inline void State::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void State::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:service.State.frame_id)
}

// uint64 timestamp_ms = 3;
inline void State::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::_internal_timestamp_ms() const {
  return timestamp_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:service.State.timestamp_ms)
  return _internal_timestamp_ms();
}
inline void State::_internal_set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ms_ = value;
}
inline void State::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:service.State.timestamp_ms)
}

// string agent_type = 4;
inline void State::clear_agent_type() {
  agent_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& State::agent_type() const {
  // @@protoc_insertion_point(field_get:service.State.agent_type)
  return _internal_agent_type();
}
inline void State::set_agent_type(const std::string& value) {
  _internal_set_agent_type(value);
  // @@protoc_insertion_point(field_set:service.State.agent_type)
}
inline std::string* State::mutable_agent_type() {
  // @@protoc_insertion_point(field_mutable:service.State.agent_type)
  return _internal_mutable_agent_type();
}
inline const std::string& State::_internal_agent_type() const {
  return agent_type_.Get();
}
inline void State::_internal_set_agent_type(const std::string& value) {
  
  agent_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void State::set_agent_type(std::string&& value) {
  
  agent_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.State.agent_type)
}
inline void State::set_agent_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agent_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service.State.agent_type)
}
inline void State::set_agent_type(const char* value,
    size_t size) {
  
  agent_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.State.agent_type)
}
inline std::string* State::_internal_mutable_agent_type() {
  
  return agent_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* State::release_agent_type() {
  // @@protoc_insertion_point(field_release:service.State.agent_type)
  return agent_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void State::set_allocated_agent_type(std::string* agent_type) {
  if (agent_type != nullptr) {
    
  } else {
    
  }
  agent_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.State.agent_type)
}
inline std::string* State::unsafe_arena_release_agent_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service.State.agent_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return agent_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void State::unsafe_arena_set_allocated_agent_type(
    std::string* agent_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (agent_type != nullptr) {
    
  } else {
    
  }
  agent_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      agent_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.State.agent_type)
}

// double x = 5;
inline void State::clear_x() {
  x_ = 0;
}
inline double State::_internal_x() const {
  return x_;
}
inline double State::x() const {
  // @@protoc_insertion_point(field_get:service.State.x)
  return _internal_x();
}
inline void State::_internal_set_x(double value) {
  
  x_ = value;
}
inline void State::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:service.State.x)
}

// double y = 6;
inline void State::clear_y() {
  y_ = 0;
}
inline double State::_internal_y() const {
  return y_;
}
inline double State::y() const {
  // @@protoc_insertion_point(field_get:service.State.y)
  return _internal_y();
}
inline void State::_internal_set_y(double value) {
  
  y_ = value;
}
inline void State::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:service.State.y)
}

// double vx = 7;
inline void State::clear_vx() {
  vx_ = 0;
}
inline double State::_internal_vx() const {
  return vx_;
}
inline double State::vx() const {
  // @@protoc_insertion_point(field_get:service.State.vx)
  return _internal_vx();
}
inline void State::_internal_set_vx(double value) {
  
  vx_ = value;
}
inline void State::set_vx(double value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:service.State.vx)
}

// double vy = 8;
inline void State::clear_vy() {
  vy_ = 0;
}
inline double State::_internal_vy() const {
  return vy_;
}
inline double State::vy() const {
  // @@protoc_insertion_point(field_get:service.State.vy)
  return _internal_vy();
}
inline void State::_internal_set_vy(double value) {
  
  vy_ = value;
}
inline void State::set_vy(double value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:service.State.vy)
}

// double psi_rad = 9;
inline void State::clear_psi_rad() {
  psi_rad_ = 0;
}
inline double State::_internal_psi_rad() const {
  return psi_rad_;
}
inline double State::psi_rad() const {
  // @@protoc_insertion_point(field_get:service.State.psi_rad)
  return _internal_psi_rad();
}
inline void State::_internal_set_psi_rad(double value) {
  
  psi_rad_ = value;
}
inline void State::set_psi_rad(double value) {
  _internal_set_psi_rad(value);
  // @@protoc_insertion_point(field_set:service.State.psi_rad)
}

// double length = 10;
inline void State::clear_length() {
  length_ = 0;
}
inline double State::_internal_length() const {
  return length_;
}
inline double State::length() const {
  // @@protoc_insertion_point(field_get:service.State.length)
  return _internal_length();
}
inline void State::_internal_set_length(double value) {
  
  length_ = value;
}
inline void State::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:service.State.length)
}

// double width = 11;
inline void State::clear_width() {
  width_ = 0;
}
inline double State::_internal_width() const {
  return width_;
}
inline double State::width() const {
  // @@protoc_insertion_point(field_get:service.State.width)
  return _internal_width();
}
inline void State::_internal_set_width(double value) {
  
  width_ = value;
}
inline void State::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:service.State.width)
}

// -------------------------------------------------------------------

// Trajectory

// repeated .service.State state = 1;
inline int Trajectory::_internal_state_size() const {
  return state_.size();
}
inline int Trajectory::state_size() const {
  return _internal_state_size();
}
inline void Trajectory::clear_state() {
  state_.Clear();
}
inline ::service::State* Trajectory::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:service.Trajectory.state)
  return state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::State >*
Trajectory::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:service.Trajectory.state)
  return &state_;
}
inline const ::service::State& Trajectory::_internal_state(int index) const {
  return state_.Get(index);
}
inline const ::service::State& Trajectory::state(int index) const {
  // @@protoc_insertion_point(field_get:service.Trajectory.state)
  return _internal_state(index);
}
inline ::service::State* Trajectory::_internal_add_state() {
  return state_.Add();
}
inline ::service::State* Trajectory::add_state() {
  // @@protoc_insertion_point(field_add:service.Trajectory.state)
  return _internal_add_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service::State >&
Trajectory::state() const {
  // @@protoc_insertion_point(field_list:service.Trajectory.state)
  return state_;
}

// -------------------------------------------------------------------

// FetchEnvRequest

// -------------------------------------------------------------------

// FetchEnvResponse

// int32 resp_code = 1;
inline void FetchEnvResponse::clear_resp_code() {
  resp_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchEnvResponse::_internal_resp_code() const {
  return resp_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FetchEnvResponse::resp_code() const {
  // @@protoc_insertion_point(field_get:service.FetchEnvResponse.resp_code)
  return _internal_resp_code();
}
inline void FetchEnvResponse::_internal_set_resp_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resp_code_ = value;
}
inline void FetchEnvResponse::set_resp_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resp_code(value);
  // @@protoc_insertion_point(field_set:service.FetchEnvResponse.resp_code)
}

// string msg = 2;
inline void FetchEnvResponse::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FetchEnvResponse::msg() const {
  // @@protoc_insertion_point(field_get:service.FetchEnvResponse.msg)
  return _internal_msg();
}
inline void FetchEnvResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:service.FetchEnvResponse.msg)
}
inline std::string* FetchEnvResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:service.FetchEnvResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& FetchEnvResponse::_internal_msg() const {
  return msg_.Get();
}
inline void FetchEnvResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FetchEnvResponse::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.FetchEnvResponse.msg)
}
inline void FetchEnvResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service.FetchEnvResponse.msg)
}
inline void FetchEnvResponse::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.FetchEnvResponse.msg)
}
inline std::string* FetchEnvResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FetchEnvResponse::release_msg() {
  // @@protoc_insertion_point(field_release:service.FetchEnvResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchEnvResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.FetchEnvResponse.msg)
}
inline std::string* FetchEnvResponse::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service.FetchEnvResponse.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FetchEnvResponse::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.FetchEnvResponse.msg)
}

// .service.Trajectory trajectory = 3;
inline bool FetchEnvResponse::_internal_has_trajectory() const {
  return this != internal_default_instance() && trajectory_ != nullptr;
}
inline bool FetchEnvResponse::has_trajectory() const {
  return _internal_has_trajectory();
}
inline void FetchEnvResponse::clear_trajectory() {
  if (GetArena() == nullptr && trajectory_ != nullptr) {
    delete trajectory_;
  }
  trajectory_ = nullptr;
}
inline const ::service::Trajectory& FetchEnvResponse::_internal_trajectory() const {
  const ::service::Trajectory* p = trajectory_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service::Trajectory*>(
      &::service::_Trajectory_default_instance_);
}
inline const ::service::Trajectory& FetchEnvResponse::trajectory() const {
  // @@protoc_insertion_point(field_get:service.FetchEnvResponse.trajectory)
  return _internal_trajectory();
}
inline void FetchEnvResponse::unsafe_arena_set_allocated_trajectory(
    ::service::Trajectory* trajectory) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_);
  }
  trajectory_ = trajectory;
  if (trajectory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.FetchEnvResponse.trajectory)
}
inline ::service::Trajectory* FetchEnvResponse::release_trajectory() {
  auto temp = unsafe_arena_release_trajectory();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service::Trajectory* FetchEnvResponse::unsafe_arena_release_trajectory() {
  // @@protoc_insertion_point(field_release:service.FetchEnvResponse.trajectory)
  
  ::service::Trajectory* temp = trajectory_;
  trajectory_ = nullptr;
  return temp;
}
inline ::service::Trajectory* FetchEnvResponse::_internal_mutable_trajectory() {
  
  if (trajectory_ == nullptr) {
    auto* p = CreateMaybeMessage<::service::Trajectory>(GetArena());
    trajectory_ = p;
  }
  return trajectory_;
}
inline ::service::Trajectory* FetchEnvResponse::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable:service.FetchEnvResponse.trajectory)
  return _internal_mutable_trajectory();
}
inline void FetchEnvResponse::set_allocated_trajectory(::service::Trajectory* trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trajectory_;
  }
  if (trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trajectory);
    if (message_arena != submessage_arena) {
      trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory, submessage_arena);
    }
    
  } else {
    
  }
  trajectory_ = trajectory;
  // @@protoc_insertion_point(field_set_allocated:service.FetchEnvResponse.trajectory)
}

// -------------------------------------------------------------------

// PushMyTrajectoryRequest

// .service.Trajectory trajectory = 3;
inline bool PushMyTrajectoryRequest::_internal_has_trajectory() const {
  return this != internal_default_instance() && trajectory_ != nullptr;
}
inline bool PushMyTrajectoryRequest::has_trajectory() const {
  return _internal_has_trajectory();
}
inline void PushMyTrajectoryRequest::clear_trajectory() {
  if (GetArena() == nullptr && trajectory_ != nullptr) {
    delete trajectory_;
  }
  trajectory_ = nullptr;
}
inline const ::service::Trajectory& PushMyTrajectoryRequest::_internal_trajectory() const {
  const ::service::Trajectory* p = trajectory_;
  return p != nullptr ? *p : *reinterpret_cast<const ::service::Trajectory*>(
      &::service::_Trajectory_default_instance_);
}
inline const ::service::Trajectory& PushMyTrajectoryRequest::trajectory() const {
  // @@protoc_insertion_point(field_get:service.PushMyTrajectoryRequest.trajectory)
  return _internal_trajectory();
}
inline void PushMyTrajectoryRequest::unsafe_arena_set_allocated_trajectory(
    ::service::Trajectory* trajectory) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_);
  }
  trajectory_ = trajectory;
  if (trajectory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.PushMyTrajectoryRequest.trajectory)
}
inline ::service::Trajectory* PushMyTrajectoryRequest::release_trajectory() {
  auto temp = unsafe_arena_release_trajectory();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service::Trajectory* PushMyTrajectoryRequest::unsafe_arena_release_trajectory() {
  // @@protoc_insertion_point(field_release:service.PushMyTrajectoryRequest.trajectory)
  
  ::service::Trajectory* temp = trajectory_;
  trajectory_ = nullptr;
  return temp;
}
inline ::service::Trajectory* PushMyTrajectoryRequest::_internal_mutable_trajectory() {
  
  if (trajectory_ == nullptr) {
    auto* p = CreateMaybeMessage<::service::Trajectory>(GetArena());
    trajectory_ = p;
  }
  return trajectory_;
}
inline ::service::Trajectory* PushMyTrajectoryRequest::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable:service.PushMyTrajectoryRequest.trajectory)
  return _internal_mutable_trajectory();
}
inline void PushMyTrajectoryRequest::set_allocated_trajectory(::service::Trajectory* trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trajectory_;
  }
  if (trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trajectory);
    if (message_arena != submessage_arena) {
      trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory, submessage_arena);
    }
    
  } else {
    
  }
  trajectory_ = trajectory;
  // @@protoc_insertion_point(field_set_allocated:service.PushMyTrajectoryRequest.trajectory)
}

// -------------------------------------------------------------------

// PushMyTrajectoryResponse

// int32 resp_code = 1;
inline void PushMyTrajectoryResponse::clear_resp_code() {
  resp_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushMyTrajectoryResponse::_internal_resp_code() const {
  return resp_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushMyTrajectoryResponse::resp_code() const {
  // @@protoc_insertion_point(field_get:service.PushMyTrajectoryResponse.resp_code)
  return _internal_resp_code();
}
inline void PushMyTrajectoryResponse::_internal_set_resp_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resp_code_ = value;
}
inline void PushMyTrajectoryResponse::set_resp_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resp_code(value);
  // @@protoc_insertion_point(field_set:service.PushMyTrajectoryResponse.resp_code)
}

// string msg = 2;
inline void PushMyTrajectoryResponse::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PushMyTrajectoryResponse::msg() const {
  // @@protoc_insertion_point(field_get:service.PushMyTrajectoryResponse.msg)
  return _internal_msg();
}
inline void PushMyTrajectoryResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:service.PushMyTrajectoryResponse.msg)
}
inline std::string* PushMyTrajectoryResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:service.PushMyTrajectoryResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& PushMyTrajectoryResponse::_internal_msg() const {
  return msg_.Get();
}
inline void PushMyTrajectoryResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PushMyTrajectoryResponse::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.PushMyTrajectoryResponse.msg)
}
inline void PushMyTrajectoryResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:service.PushMyTrajectoryResponse.msg)
}
inline void PushMyTrajectoryResponse::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.PushMyTrajectoryResponse.msg)
}
inline std::string* PushMyTrajectoryResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PushMyTrajectoryResponse::release_msg() {
  // @@protoc_insertion_point(field_release:service.PushMyTrajectoryResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PushMyTrajectoryResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.PushMyTrajectoryResponse.msg)
}
inline std::string* PushMyTrajectoryResponse::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service.PushMyTrajectoryResponse.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PushMyTrajectoryResponse::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.PushMyTrajectoryResponse.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_simulator_2eproto
